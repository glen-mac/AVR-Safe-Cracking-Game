.include "m2560def.inc"
.def row = r16 ; current row number
.def col = r17 ; current column number
.def rmask = r18 ; mask for current row during scan
.def cmask = r19 ; mask for current column during scan
.def temp1 = r20
.def temp2 = r21
.def debtimerlo = r24	;the timer value for debouncing
.def debtimerhi = r25	;the timer value for debouncing
.def countdown = r22
.equ debDELAY = 500 
.equ flashspeed = 7812
.equ PORTLDIR = 0xF0 ; PD7 - 4: output, PD3 - 0, input
.equ INITCOLMASK = 0xEF ; scan from the rightmost column,
.equ INITROWMASK = 0x01 ; scan from the top row
.equ ROWMASK = 0x0F

.macro do_lcd_command
	ldi r16, @0
	rcall lcd_command
	rcall lcd_wait
.endmacro
.macro do_lcd_data
	mov r16, temp
	rcall lcd_data
	rcall lcd_wait
.endmacro
.macro toggle 
	push temp
	ldi temp, @1
	sts @0, temp
	pop temp
.endmacro
.cseg
.org 0x0000
	jmp RESET
	.org EXT1addr
	jmp EXT_INT_L
	.org OVF2addr
	jmp Timer2OVF 
	.org OVF0addr
	jmp Timer0OVF 
	
RESET:
	ldi temp1, low(RAMEND) ; initialize the stack
	out SPL, temp1
	ldi temp1, high(RAMEND)
	out SPH, temp1
	
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;; prepare LCD
	ser r16
	out DDRF, r16
	out DDRA, r16
	clr r16
	out PORTF, r16
	out PORTA, r16
	do_lcd_command 0b00111000 ; 2x5x7
	rcall sleep_5ms
	do_lcd_command 0b00111000 ; 2x5x7
	rcall sleep_1ms
	do_lcd_command 0b00111000 ; 2x5x7
	do_lcd_command 0b00111000 ; 2x5x7
	do_lcd_command 0b00001000 ; display off?
	do_lcd_command 0b00000001 ; clear display
	do_lcd_command 0b00000110 ; increment, no display shift
	do_lcd_command 0b00001110 ; Cursor on, bar, no blink
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;; prepare LCD

  	ldi temp1, PORTLDIR ; PA7:4/PA3:0, out/in
	sts DDRL, temp1
	ser temp1; PORTC is output
	out DDRC, temp1
	clr temp1
	out PORTC, temp1 

	do_lcd_data '2'
	do_lcd_data '1'
	do_lcd_data '2'
	do_lcd_data '1'
	do_lcd_data ' '
	do_lcd_data '1'
	do_lcd_data '6'
	do_lcd_data 's'
	do_lcd_data '1'
	
	do_lcd_command 0b11000000 ;change to 2 line

	do_lcd_data 'S'
	do_lcd_data 'a'
	do_lcd_data 'f'
	do_lcd_data 'e'
	do_lcd_data ' '
	do_lcd_data 'C'
	do_lcd_data 'r'
	do_lcd_data 'a'
	do_lcd_data 'c'
	do_lcd_data 'k'
	do_lcd_data 'e'
	do_lcd_data 'r'

Timer0OVF: 
	cpse countdown, 0
	rjmp conttimer
	rjmp ResetPot
	conttimer: 
	adiw yh:yl, 1
	cpi YL, low(7812)
	ldi temp2, high(7812)
	cpc YH, temp2
	brne end0
	ldi temp, '0'
	add temp, countdown 
	do_lcd_data
	dec countdown
	clr YL
	clr YH
	end0:
	reti

ResetPot:
	toggle TIMSK0, 0

Timer2OVF:
	push temp
	adiw debtimerlo, 1
	ldi temp, high(debDELAY)
	cpi debtimerlo, low(debDELAY)
	cpc debtimerhi, temp
	brne enddeb
	ldi debounce, 1
	toggle TIMSK2, 0
	enddeb:
	pop temp
	reti

ResetPot:

EXT_INT_L:
	;;;;check if button is still being debounced
	;;;;if not then tally the button presses
	cpse debounce, 1	;if still debouncing then leave
	reti
	debounced
	push temp
	do_lcd_command 0b00000001 ;clear the screen
	do_lcd_data '2'
	do_lcd_data '1'
	do_lcd_data '2'
	do_lcd_data '1'
	do_lcd_data ' '
	do_lcd_data '1'
	do_lcd_data '6'
	do_lcd_data 's'    
	do_lcd_data '1'
	do_lcd_command 0b11000000 ;change to 2 line    
	clr debtimerlo	;reset debounce timer
	clr debtimerhi
	clr debounce
	toggle TIMSK2, 1<<TOIE2
	rcall countdownfunc
	pop temp
	endIntL:
	reti

coountdownfunc:
	ldi countdown, 3 
	do_lcd_data 'S'
	do_lcd_data 't'
	do_lcd_data 'a'
	do_lcd_data 'r'
	do_lcd_data 't'
	do_lcd_data 'i'
	do_lcd_data 'n'
	do_lcd_data 'g'    
	do_lcd_data ' '
	do_lcd_data 'i'
	do_lcd_data 'n'
	do_lcd_data ' '
	toggle TIMSK0, 1<<TOIE0
	ret
